name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ASDF_ODO_VERBOSE: "true"

jobs:
  plugin_test:
    name: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
        with:
          asdf_branch: v0.10.2

      - name: Install plugin manually
        run: |
          mkdir -p ~/.asdf/plugins
          ln -snf "$(pwd)" ~/.asdf/plugins/odo

      - name: Set path to odo config file
        run: |
          mkdir -p "${HOME}/.config/odo"
          cp "$(pwd)/.github/.odo_config.yaml" "${HOME}/.config/odo/config.yaml"
          echo "GLOBALODOCONFIG=${HOME}/.config/odo/config.yaml" >> $GITHUB_ENV

      - name: Install latest odo
        run: |
          asdf install odo latest
          asdf global odo latest

      - name: Test odo
        run: odo version

  plugin_test_specific_version:
    name: Test installing specific version
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        version: ["2.0.0", "2.5.1", "3.0.0-beta3", "3.0.0-rc1"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
        with:
          asdf_branch: v0.10.2

      - name: Install plugin manually
        run: |
          mkdir -p ~/.asdf/plugins
          ln -sf "$(pwd)" ~/.asdf/plugins/odo

      - name: Set path to odo config file
        run: |
          mkdir -p "${HOME}/.config/odo"
          cp "$(pwd)/.github/.odo_config.yaml" "${HOME}/.config/odo/config.yaml"
          echo "GLOBALODOCONFIG=${HOME}/.config/odo/config.yaml" >> $GITHUB_ENV

      - name: Install odo v${{ matrix.version }}
        run: |
          asdf install odo ${{ matrix.version }}
          asdf global odo ${{ matrix.version }}

      - name: Test odo v${{ matrix.version }}
        run: |
          res=$(odo version | grep -F "v${{ matrix.version }}" || echo false)
          if [[ "$res" == "false" ]]; then
            version_output=$(odo version 2>&1 || true)
            echo "Expected 'odo version' to contain \"v${{ matrix.version }}\", but got $version_output"
            exit 1
          fi

  plugin_test_git_ref_upstream_repo:
    name: Git refs from upstream repo
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        git_ref: [v2, 7618e8f3e4385bdca620e934c0b27d8fcc878099]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
        with:
          asdf_branch: v0.10.2

      - name: Install Golang (for installing odo from Git refs)
        run: |
          asdf plugin-add golang https://github.com/kennyp/asdf-golang.git
          asdf install golang 1.17.13
          asdf global golang 1.17.13

      - name: Install plugin manually
        run: |
          mkdir -p ~/.asdf/plugins
          ln -sf "$(pwd)" ~/.asdf/plugins/odo

      - name: Set path to odo config file
        run: |
          mkdir -p "${HOME}/.config/odo"
          cp "$(pwd)/.github/.odo_config.yaml" "${HOME}/.config/odo/config.yaml"
          echo "GLOBALODOCONFIG=${HOME}/.config/odo/config.yaml" >> $GITHUB_ENV

      - name: Install odo using Git ref (${{ matrix.git_ref }}) from upstream repo
        env:
          GIT_REF: ${{ matrix.git_ref }}
        run: |
          asdf install odo git-ref:$GIT_REF
          asdf global odo git-ref:$GIT_REF

      - name: Test odo using Git ref (${{ matrix.git_ref }}) from upstream repo
        env:
          GIT_REF: ${{ matrix.git_ref }}
        run: |
          res=$(odo version | grep -F "($GIT_REF)" || echo false)
          if [[ "$res" == "false" ]]; then
            version_output=$(odo version 2>&1 || true)
            echo "Expected 'odo version' to contain \"($GIT_REF)\", but got $version_output"
            exit 1
          fi

  plugin_test_git_ref_fork_repo:
    name: Git refs from fork
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        git_ref:
        - '2c6c9f1a418c6620026a1d9908f268083a706e35'
        - 'docs-getting-started-order'
        # cf #2: Could not install odo from a branch that contains a / in its name
        - 'asdf-odo/2-could-not-install-odo-from-a-branch-that-contains-a-in-its-name'
    runs-on: ${{ matrix.os }}
    env:
      ASDF_TOOL_REPO: "https://github.com/rm3l/odo"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
        with:
          asdf_branch: v0.10.2

      - name: Install Golang (for installing odo from Git refs)
        run: |
          asdf plugin-add golang https://github.com/kennyp/asdf-golang.git
          asdf install golang 1.17.13
          asdf global golang 1.17.13

      - name: Install plugin manually
        run: |
          mkdir -p ~/.asdf/plugins
          ln -sf "$(pwd)" ~/.asdf/plugins/odo

      - name: Set path to odo config file
        run: |
          mkdir -p "${HOME}/.config/odo"
          cp "$(pwd)/.github/.odo_config.yaml" "${HOME}/.config/odo/config.yaml"
          echo "GLOBALODOCONFIG=${HOME}/.config/odo/config.yaml" >> $GITHUB_ENV

      - name: Download and install odo using Git ref (${{ matrix.git_ref }}) from fork repo
        env:
          GIT_REF: ${{ matrix.git_ref }}
        run: |
          asdf install odo git-ref:$GIT_REF
          asdf global odo git-ref:$GIT_REF

      - name: Test odo using Git ref (${{ matrix.git_ref }}) from fork repo
        env:
          GIT_REF: ${{ matrix.git_ref }}
        run: |
          res=$(odo version | grep -F "(${GIT_REF}@${ASDF_TOOL_REPO})" || echo false)
          if [[ "$res" == "false" ]]; then
            version_output=$(odo version 2>&1 || true)
            echo "Expected 'odo version' to contain \"(${GIT_REF}@${ASDF_TOOL_REPO})\", but got $version_output"
            exit 1
          fi
